package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// DeleteEventHandlerFunc turns a function with the right signature into a delete event handler
type DeleteEventHandlerFunc func(DeleteEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteEventHandlerFunc) Handle(params DeleteEventParams) middleware.Responder {
	return fn(params)
}

// DeleteEventHandler interface for that can handle valid delete event params
type DeleteEventHandler interface {
	Handle(DeleteEventParams) middleware.Responder
}

// NewDeleteEvent creates a new http.Handler for the delete event operation
func NewDeleteEvent(ctx *middleware.Context, handler DeleteEventHandler) *DeleteEvent {
	return &DeleteEvent{Context: ctx, Handler: handler}
}

/*DeleteEvent swagger:route DELETE /events/{id} deleteEvent

イベント削除

*/
type DeleteEvent struct {
	Context *middleware.Context
	Params  DeleteEventParams
	Handler DeleteEventHandler
}

func (o *DeleteEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewDeleteEventParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/httpkit/validate"
	"github.com/go-swagger/go-swagger/strfmt"
)

// AddEventHandlerFunc turns a function with the right signature into a add event handler
type AddEventHandlerFunc func(AddEventParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddEventHandlerFunc) Handle(params AddEventParams) middleware.Responder {
	return fn(params)
}

// AddEventHandler interface for that can handle valid add event params
type AddEventHandler interface {
	Handle(AddEventParams) middleware.Responder
}

// NewAddEvent creates a new http.Handler for the add event operation
func NewAddEvent(ctx *middleware.Context, handler AddEventHandler) *AddEvent {
	return &AddEvent{Context: ctx, Handler: handler}
}

/*AddEvent swagger:route PUT /events/{id} addEvent

イベントの作成

*/
type AddEvent struct {
	Context *middleware.Context
	Params  AddEventParams
	Handler AddEventHandler
}

func (o *AddEvent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewAddEventParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

/*AddEventBody AddEventBody add event body

swagger:model AddEventBody
*/
type AddEventBody struct {

	/* 最大チケット数

	Required: true
	*/
	MaxTicket int32 `json:"max_ticket,omitempty"`
}

// Validate validates this add event body
func (o *AddEventBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMaxTicket(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddEventBody) validateMaxTicket(formats strfmt.Registry) error {

	if err := validate.Required("options"+"."+"max_ticket", "body", int32(o.MaxTicket)); err != nil {
		return err
	}

	return nil
}

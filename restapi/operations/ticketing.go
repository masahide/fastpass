package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit/middleware"
)

// TicketingHandlerFunc turns a function with the right signature into a ticketing handler
type TicketingHandlerFunc func(TicketingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TicketingHandlerFunc) Handle(params TicketingParams) middleware.Responder {
	return fn(params)
}

// TicketingHandler interface for that can handle valid ticketing params
type TicketingHandler interface {
	Handle(TicketingParams) middleware.Responder
}

// NewTicketing creates a new http.Handler for the ticketing operation
func NewTicketing(ctx *middleware.Context, handler TicketingHandler) *Ticketing {
	return &Ticketing{Context: ctx, Handler: handler}
}

/*Ticketing swagger:route PUT /events/{id}/tickets/{uid} ticketing

発券

*/
type Ticketing struct {
	Context *middleware.Context
	Params  TicketingParams
	Handler TicketingHandler
}

func (o *Ticketing) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	o.Params = NewTicketingParams()

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(o.Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

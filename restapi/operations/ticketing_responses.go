package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/masahide/fastpass/models"
)

/*TicketingOK チケット発券

swagger:response ticketingOK
*/
type TicketingOK struct {

	// In: body
	Payload *models.Ticket `json:"body,omitempty"`
}

// NewTicketingOK creates TicketingOK with default headers values
func NewTicketingOK() *TicketingOK {
	return &TicketingOK{}
}

// WithPayload adds the payload to the ticketing o k response
func (o *TicketingOK) WithPayload(payload *models.Ticket) *TicketingOK {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *TicketingOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*TicketingForbidden 発券数超過で発券を中止

swagger:response ticketingForbidden
*/
type TicketingForbidden struct {
}

// NewTicketingForbidden creates TicketingForbidden with default headers values
func NewTicketingForbidden() *TicketingForbidden {
	return &TicketingForbidden{}
}

// WriteResponse to the client
func (o *TicketingForbidden) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(403)
}

/*TicketingNotFound eventが見つからない

swagger:response ticketingNotFound
*/
type TicketingNotFound struct {
}

// NewTicketingNotFound creates TicketingNotFound with default headers values
func NewTicketingNotFound() *TicketingNotFound {
	return &TicketingNotFound{}
}

// WriteResponse to the client
func (o *TicketingNotFound) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(404)
}

/*TicketingConflict Conflict(発券済み)

swagger:response ticketingConflict
*/
type TicketingConflict struct {
}

// NewTicketingConflict creates TicketingConflict with default headers values
func NewTicketingConflict() *TicketingConflict {
	return &TicketingConflict{}
}

// WriteResponse to the client
func (o *TicketingConflict) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(409)
}

/*TicketingInternalServerError unexpected error

swagger:response ticketingInternalServerError
*/
type TicketingInternalServerError struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewTicketingInternalServerError creates TicketingInternalServerError with default headers values
func NewTicketingInternalServerError() *TicketingInternalServerError {
	return &TicketingInternalServerError{}
}

// WithPayload adds the payload to the ticketing internal server error response
func (o *TicketingInternalServerError) WithPayload(payload *models.Error) *TicketingInternalServerError {
	o.Payload = payload
	return o
}

// WriteResponse to the client
func (o *TicketingInternalServerError) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
